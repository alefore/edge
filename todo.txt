-- Display

-- Editing

Implement delete of page.

Let buffers "garbage collect" their contents: if they're clean and haven't been accessed in a while, just have them drop their contents.
  - Requires making them load them lazily.
  - Probably not too important? We can just let the OS page out appropriate pages.

Add "pipe" command: select the region (similar to delete: line, paragraph, buffer...), and then prompt for a command. Pipe the contents of the region to the command, and replace them with the output of the command.

-- Navigation

Improve "g", the current behavior is kind of annoying:
  There should be a way (other than pressing it again) to specify if it should ignore space.  Maybe a modifier can do it?

Honor the "margin_columns" variable.

Add a boolean variable "highlight_current_line" (default: false); when set, highlight the line with the current cursor position.

-- Prompt

-- Syntax

Correctly handle: '\000'

Adjust the syntax parsing to not have to re-parse if it lands on a line in the same state as previously parsed.
  This would drastically reduce the number of times that large buffers need to be reparsed.
  Each line remembers: had I already been parsed starting at state X? If so, results are Y and, afterwards, state is Z.
  When a line is modified, we just discard its parsing data and trigger reparsing from the final state of the previous line.
    If the state is identical as before, we can skip reparsing the whole rest of the buffer.

-- Commands

Improve "af":
  Add more structures to "af":
    BUFFER> run a command with the whole contents of the buffer
      (another possibility: run a command for each line in buffer (prompt))
  Handle repetitions?  Maybe for line, run multiple lines in separate buffers?
  Switch it to use the "new" enter-applies-command (similar to "d") mode.

When running subcommands with aC, actually set variables "ARG0", "ARG1", "ARG2", "ARG3", with words in line...

Create some "barriers" that limit the number of subprocesses.  Set a limit for each.  Maybe as a special type of buffer?  Let it reload to show the state?
  Commands should by default go against a shared barrier, but should have a variable that specifies what barrier to use.

Persist undo history?

-- List of buffers

-- Variables

atomic_lines should probably also apply to multiple cursors.

-- VM

Add support for templates, so that we can do "vector<string>".

Support polymorphism: same name for multiple symbols with different type.
  Requires adjusting lookup and all callers.

Support in-line functions and/or lambda forms. Tricky.

-- Client/server

Allow a client to just disconnect.
  This is currently hard because the server doesn't know which client issued the commands it processes.

-- Misc

Support variables scoped at the Editor level (i.e. not specific to a given buffer).

Add a variable to set the exit status?
  Should probably be an int, default to 0.
  Maybe add a quick way of setting it to -1? "aE"?

On start-up, SetStatus to some randomly-changing greeting message.
