Edge - A text editor.

1. Introduction

Edge is a text editor and terminal handler.  It uses the notion of "buffers" to
represent open files or the output of a program (which might or might not still
be running, and which might or might not have a terminal of its own).  As its
extension language, Edge uses a small subset of C++/Java.

Edge is under active development and many of its bindings and/or general
interface is likely to change soon.

This document describes the use of Edge.  Edge is an editor with multiple modes,
where commands are typically executed by typing their associated character
sequences.  These sequences are given in this document between quotes.

To get the most out of Edge, you should probably familiarize yourself with the
modifiers (section 6) and the navigation (section 3) and editing (section 4)
commands.  We'd also strongly recommend learning the commands for controlling
buffers (section 5).

Edge will probably be relatively hard to use for the first few hours but you
might be surprised by how fast your fingers will start picking up the new
bindings and how well the modifiers-based language works: it is a small (and
thus not very difficult to learn) language that is very expressive.


2. Running Edge

If you run Edge on a file, it will open it and display it:

  $ edge README.txt

Example commands:

  "aq" - Quit (short for "Advanced > Quit").

  "?" and "a?" - Shows help for basic and advanced commands.

  "5d" - Delete 5 characters.  Delete is covered in section 4.2.

  "ed" - Delete a lines (Line; Delete).  Section 6.1 explains the Line modifier
      (and other structure modifiers).

  "w]d" - Delete until the end of the word (Word; from current position to end;
      Delete).  The word modifier is covered in section 6.1 and the "]" modifier
      in section 6.2.

  "p" - Paste the previously deleted sequence.  See section 4.3.

  "i" - Insert (type into the buffer).  See section 4.1.

  "u" - Undo the last command.  See section 4.4.

  "af make" + Enter - Open a new buffer with the output of a given command.
      "af" is short for "Advanced > Fork" and is covered in section 5.3.

  "ar" - Reload the current buffer.  See section 5.2.

  "al" - Shows the list of buffers currently open.  See section 5.1.

  "a." - Show the list of files in the current directory.  See section 5.5.


3. Navigating a buffer


3.1 Basic navigation

The cursor will start at the beginning of the file.  You can use "h", "j", "k",
"l" or the arrow keys to move it around.

TODO: Explain structures and modifiers.


3.2 Search for a regular expression

You can search for a string with "/": Edge will prompt you for a regular
expression to search for and pressing Enter will take you to its first match
after the current cursor position.

Search supports autocompletion, where hitting Tab will replace the current
regular expression by the longest common prefix of its next 10 matches
(configurable through variable xxx, see section 7).  Press Tab once again to
display a buffer with the list of matches.

To repeat a search, use the Search structure (section 6.1).

If the Word structure (section 6.1) is enabled, Edge will not prompt you for a
regular expression: it will, instead, just search for the word under the cursor.

To search backwards, use the Reverse modifier (section 6.3).


3.3. Search for a character

You can search for a character with "f": this will take you to the next
occurrence of the next character you type.  This is roughly equivalent to typing
"/", entering a character and pressing Enter.

To search backwards, use the Reverse modifier (section 6.3).


3.4. History of positions

Edge keeps a history of the positions in which you've been.  You can go back to
the previous position with "b".

The list of positions is kept in a buffer called "- positions".

TODO: Describe the effect of structures.


3.5. Goto beginning

Use "g" to go to the first character in the current line.  Press "g" again to go
to the last character in the current line.

If a repetition is active, the behavior changes to "go to the i-th character
in the current line".

The current structure alters the behavior thus:

- Word: Goes to the i-th word from the beginning of the current line.
- Line: Goes to the i-th line from the beginning of the current buffer.
- Page: Goes to the i-th page from the beginning of the current buffer.
- Buffer: Goes to the i-th buffer (in the list of buffers).

If the Reverse modifier is enabled, moves backwards from the end.

If the structure modifier is set to "FromEndToCurrentPosition", moves backwards
from the end (unless the Reverse modifier is also enabled, in which case they
cancel out).

(The current implementation is slightly different than this in how it handles
repeated presses, but we'll likely change it to do this.)


3.6. Go to file

If the cursor is over a path that exists in the filesystem, pressing Enter
creates a new buffer with the contents of that file (or, if a buffer for the
file already exists, just takes you to it).

See section 5.5 for more commands to open a file.


4. Editing a buffer


4.1. Inserting characters

To type some text into a buffer, use "i".  This enters insert mode, which is
indicated at the bottom of the screen by the word "type" (of "type (raw)" if the
buffer is a command with a terminal).  Press Esc to exit insert mode.  Anything
you type while in insert mode will be inserted into the buffer; for buffers with
an associated terminal, the text will be written to the terminal.

If insert mode is activated with the Line structure, an empty line will be
inserted above the current line and text will be inserted into it.  The Reverse
modifier will instead insert the line after the current line.

The insertion modifier (section 6.5) will specify if insert should preserve the
contents that follow the cursor (default) or replace them as you type.


4.2. Deleting contents

Press "d" to delete the current character.

The actual meaning varies depending on the active structure (section 6.1) as
described in the subsections.

The "[" or "]" modifiers (section 6.2) alter this behavior, causing "d" to only
delete until the beginning or end of the current structure.  For "[", we say
that we're deleting "backwards"; for "]", "forwards"; if neither "[" nor "]" are
active, we say that we're both deleting backwards and forwards.

For example:

- To delete from the current position to the end of line, use: "e]d"
- With the cursor in a series of space characters, to delete until the beginning
  of the next workd, use: "w[d"

4.2.1. Deleting words

When the structure is set to Word, "d" deletes the current word.  The contents
of variable word_characters section 7.2.xxx) are used to specify the list of
characters that are considered part of a word.  If the cursor position is in a
non-word character, characters will be deleted until the beginning of the word,
and then the "delete word" command will run).

4.2.1. Deleting line

When the structure is set to Line, "d" deletes the current line.

The strength modifier affects the behavior as follows.  The word_characters
variable of the buffer is used to decide which characters are considered spaces.

- Very weak: Stops deleting after the first (last) sequence of spaces from the
      beginning (end) of the line.

- Weak: Similar to Default, but does not delete the newline character that
      follows the line.

- Default: If we're deleting backwards, deletes until the beginning of the line
      (including any initial spaces).  The newline character from the preceeding
      line is preserved.

      If we're deleting forwards, deletes until (including) the newline
      character that follows the current line.

- Strong: If we're deleting backwards, deletes everything from (including) the
      newline character from the preceeding line.

      Like Default, if we're deleting forwards, deletes until the newline
      character that follows the current line.

- Very strong: Similar to Strong but both forwards and backwards keeps deleting
      space characters from adjacent lines.

4.2.3. Deleting a buffer

Buffer: deletes the contents of the current buffer.  If you want to close the
current buffer, see section 5.6.



4.3. Pasting characters

Press "p" to paste the last contents deleted by the delete command.

Whenever "d" deletes some contents, they go to a special buffer called "- paste
buffer".  You could modify the contents in this buffer directly to alter what
"p" will paste.

The insertion modifier (section 6.5) will specify if insert should preserve the
contents that follow the cursor (default) or replace them as you type.


4.4. Undo & Redo

Edge maintains full undo history.  Press "u" to undo the last edition.
Navigation commands (that only alter the cursor position but not the contents of
the buffer) are ignored: undo will revert the last transformation.

To "re do" activate the Reverse modifier (section 6.3).


4.5. Repeat the last command

You can repeat the last transformation at the current position by pressing ".".

You can group multiple commands to be repeated by pressing "sr" (short for
Secondary > Record), then applying all the commands you want to group, and then
pressing "sr" again.  If you then press ".", you will repeat all the commands
in the sequence.


4.6 Capitals swap

Press "~" to convert the current character from upper case to lower case (and
viceversa) and advance by one position.

If the reverse modifier is enabled, will move backwards instead of advancing.

"~" doesn't currently handle any structures nor repetitions, but it should.


5. Buffers

5.1. List of buffers

Press "al" ("Advanced > List") to open a buffer that contains the list of
buffers.  Each line in this buffer represents a buffer: an open file or the
output of a subprocess (which may be running or may have already exited).

If you delete lines in this buffer (with "ed", see sections 6.1 and 4.2), this
will close the associated buffers.  If you have unsaved changes, you will lose
them.

The list of buffers will be updated dynamically whenever you create new buffers
or as they make progress (e.g. it will show the number of lines that have been
read from a command that's currently running).


5.2. Reload a buffer

You can reload a buffer with "ar".  If the buffer is a file, this discards any
unsaved changes.  If the buffer is a command (section 5.3), this will kill it
with SIGTERM (if it's still running), wait for it to exit, and restart it.

If you're in the list of buffers (section 5.1), you can activate Line mode
("e", section 6.1) and press "ar" to reload the buffer that the cursor is
currently on.  During software development, this can provide a quick way to
re-run commands like "make" during development and wait for them to terminate
successfully (since the list of buffers will be updated dynamically as they make
progress).


5.3. Run a command

You can run a command with "af" ("Advanced > Fork").  Edge will prompt you for a
command to run and will create a buffer in which it will run this command.  If a
buffer for the command already existed, Edge will just reload the process
(similar to "ar" as described in section 5.2).

If Line structure is active ("e", section 6.1), "af" will not prompt you for a
command but will instead run the command given in the current line.  For
commands that you might expect to run in the future, we recommend creating a
simple text file for your project in which you list them, so that you can
quickly launch them with this mechanism.

By default, commands will be run without a controlling terminal.  This can be
toggled (which can be very useful e.g. for running a shell in a buffer) with the
variable "pts" (section 7.2.1).  For example, if you run "bash", you'll probably
want to do "av" (set variable), then "pts" and Enter (to toggle the value of the
boolean variable) and then press "ar" to restart the shell.  Of course, this
should be done automatically through the buffer-reload.cc script (which we'll
start distributing soon).


5.4. Running many commands.

TODO: Describe aF


5.5. Open a file

5.5.1. Advanced > Open ("ao")

Use "ao" ("Advanced > Open") to open a file.  Edge will prompt you for the
filename.  Tab will autocomplete (and pressing Tab again will show all the
options).

In practice, we tend to use "a." (section 5.6) much more frequently to open
files.  We also tend to navigate across files by moving the cursor over to a
path and pressing return (section 3.6).

5.5.2. Path suffixes

Edge will look for an optional suffix to the path indicating the position in the
file, which is mostly compatible with the output of GCC and other similar
compilers.  The following examples show the supported forms:

- file.cc:54 takes you to line 54 of file.cc.
- file.cc:54:12 additionally takes you to column 12.
- file.cc:/XXX takes you to the first match in file.cc for the regular
  expression "XXX".

These suffixes can be given anywhere where Edge opens a file (e.g. they also
work for files specified through the command line).


5.6. Files view

If you press "a." ("Advanced > Current directory") in a buffer, a new buffer
will be created (unless it already existed) displaying the contents of the
directory containing the current buffer, one file (or directory) per line.

Like the list of buffers (section 5.1), this is a special buffer:

- Deleting lines (with "ed") from this buffer will, after prompting you for
  confirmation, delete the underlying files from the file system.

- Pressing Enter on the line for a given file will create a buffer for that file
  (unless one already existed, in which case it'll just take you to it).


5.7. Save a file

Use "aw" ("Advanced > Write") in a buffer to save its contents.

Some buffers can't be saved and will display an error in the status.


5.6. Close a buffer

Press "ad" ("Advanced > Delete") to close (delete) the current buffer.  Any
unsaved changes will be lost.

See section 5.1 for another mechanism for closing buffers, by deleting lines
from the list of buffers.


6. Structures & structure modifiers

Edge has a notion of "modifiers" that alter the behavior of commands.  There are
various kinds of modifiers, described in this section.


6.1. Logical structures

The most important type of modifier is the logical "structure" that the next
command will affect.  To set the structure, press any of the following keys:

"w" - Word: Affect the current word.
"e" - Line: Affect the current line.
"F" - Search: The region affected is based on the next match to the last search
      query (performed with "/", section 3.2).  This structure is somewhat
      different to the others and relatively fewer commands recognize it.
"E" - Page: Affect the current page.  The size of a page is computed dynamically
      based on the current screen size.
"B" - Buffer: Affect the current buffer.

The default structure is the current character.  The current structure will be
shown at the bottom of the screen (unless the structure is set to the default
value).

Once a command is executed that is affected by the structure modifier, it will
set the structure back to the default value.  However, redundantly setting the
structure to the value it already has will activate "stickyness": in this case,
the structure will not reset back to the default value.

Pressing Esc will reset the structure to the default.

Here are some examples:

- If you expect to erase many lines, you can set the structure to Line in sticky
  mode ("ee") and then just delete away ("ddddd").
- To navigate by matches to a given search, you can perform a search and set the
  structure to Search in sticky mode ("FF") and then just navigate matches with
  "h" or "l".


6.2. Sub-structure modifiers ("[" and "]")

When the structure is set to anything other than character, "[" changes the
semantics to mean "apply the command to the part of the structure from its
beginning until the current cursor position".  Conversely, "]" changes the
meaning to "apply the command from the current cursor position until the end".

The current modifier will be shown at the bottom of the screen (next to the
current structure modifier).

The specific behavior depends on the command.  This is particularly useful with
the delete command, where e.g. "]ed" could be used to delete to the beginning
of the current line.


6.3. Reverse modifier ("r")

Pressing "r" will reverse the direction in which the command is applied.  Most
commands set the direction back to the default value (forwards), but if you
press "rr", you'll activate sticky reverse mode.  Press Esc to leave sticky
mode.


6.4. Repetitions

You can type a number to set an amount of repetitions that affects the next
command.

The specific behavior depends on the command.  Most navigation and editing
commands simply repeat the command the given number of times.  Other commands
may have their behavior altered in different ways.


6.5. Insertion Modifier ("R")

By default, commands that insert text will "push" existing contents after the
current cursor position back.  Press "R" to activate "replace" mode, which will
instead overwrite previous contents of the buffer.  After a command has been
executed, the modifier will reset back to the default, but if you press "RR",
you'll activate sticky replace mode.  Press Esc to go back to the default
behavior.


7. Variables

7.1. Setting variables

TODO: av

7.2. List of variables


7.2.1. pts (bool)

If a command is forked that writes to this buffer, should it be run with its own
pseudoterminal?

Default: false.


7.2.2. close_after_clean_exit (bool)

If this buffer is a command buffer (e.g. it was started with "af", as described
in section 5.3), should the buffer be closed when the command exists with a
successful status code?

This can be used to fork commands that you expect to succeed and where you don't
care for their output unless they fail.

Default: false


7.2.3. reload_after_exit (bool)

If this buffer is a command buffer (e.g. it was started with "af", as described
in section 5.3), should the buffer be reloaded automatically when the command
exits?

When the buffer is reloaded, this variable is automatically set to the value of
default_reload_after_exit (section 7.2.4).

Default: false


7.2.4. default_reload_after_exit (bool)

If this buffer is a command buffer (e.g. it was started with "af", as described
in section 5.3), what should reload_after_exit (section 7.2.3) be set to as the
buffer is reloaded?

Default: false


7.2.5. reload_on_enter (bool)

Should this buffer be reloaded automatically when visited?

Default: false


7.2.6. atomic_lines (bool)

If true, lines can't be joined (e.g. you can't delete the last character in a
line unless the line is empty).  This is used by certain buffers that represent
lists of things (each represented as a line), for which this is a natural
behavior.

Default: false


7.2.7. save_on_close (bool)

Should this buffer be saved automatically when it's closed?

This applies both when the buffer is closed explicitly (e.g. through "ad",
section 5.6) or when Edge exits.

Default: false


7.2.8. clear_on_reload (bool)

Should any previous contents be discarded when this buffer is reloaded? If
false, previous contents will be preserved and new contents will be appended at
the end.

This is useful mainly for buffers with the output of commands, where you don't
want to discard the output of previous runs as you reload the buffer.

Default: true


7.2.9. paste_mode (bool)

When paste_mode is true in a buffer, it will be displayed in a way that makes it
possible to select (with a mouse) parts of it (that are currently shown).  It
will also allow you to paste text directly into the buffer (i.e. it will disable
any smart "auto indenting").

Default: false


7.2.10. commands_background_mode (bool)

Should new commands forked from this buffer be started in background mode?  If
false, we will switch to them automatically.

This just affects whether we switch the currently selected Edge buffer to the
new buffer; it has no effect whatsoever in the command.

Default: false


7.2.11. reload_on_buffer_write (bool)

Should the buffer on which this variable is set be reloaded automatically when
any buffer is written?

This is useful mainly for command buffers like 'make' or 'git diff'.

Default: false


7.2.12. word_characters (string)

String with all the characters that should be considered part of a word.  This
affects commands such as "wd" (delete word).

Default: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_"


7.2.13. path_characters (string)

String with all the characters that should be considered part of a path.

Default: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-.*:/"


7.2.14. path (string)

String with the path of the current file.

Default: ""


7.2.15. pts_path (string)

String with the path of the terminal used by the current buffer (or empty if the
buffer is not using a terminal).

Default: ""


7.2.16. command (string)

String with the current command (or empty).

Default: ""


7.2.17. editor_commands_path (string)

String with the path to the initial directory for editor commands ("c", see
section 6).

Default: ""


7.2.18. line_width (int)

Desired maximum width of a line.

Default: 80


7.2.19. line_prefix_characters (string)

String with all the characters that should be considered the prefix of the
actual contents of a line.  When a new line is created, the prefix of the
previous line (the sequence of all characters at the start of the previous line
that are listed in line_prefix_characters) is copied to the new line.

The order of characters in line_prefix_characters has no effect.

Default: " "


7.2.20. line_suffix_superfluous_characters (string)

String with all the characters that should be removed from the suffix of a line
(after editing it).

The order of characters in line_suffix_superfluous_characters has no effect.

Default: " "


8. Extension language


8.1. Running commands

TODO: "ac"


8.2. Running scripts

TODO: "c"


TODO: SetStatus("foo");
TODO: Document the API.
TODO: Document the integration points (e.g. buffer-reload.cc).
TODO: Useful examples
