// Various functions for handling numbers.

int max(int a, int b) { return a >= b ? a : b; }
double max(double a, double b) { return a >= b ? a : b; }
double max(int a, double b) { return a >= b ? a + 0.0 : b; }
double max(double a, int b) { return a >= b ? a : b + 0.0; }

int min(int a, int b) { return a <= b ? a : b; }
double min(double a, double b) { return a <= b ? a : b; }
double min(int a, double b) { return a <= b ? a + 0.0 : b; }
double min(double a, int b) { return a <= b ? a : b + 0.0; }

int abs(int a) { return a < 0 ? -a : a; }
double abs(double a) { return a < 0 ? -a : a; }

string IntegerAtPosition(LineColumn position) {
  string line = buffer.line(position.line());
  line = line.substr(position.column(), line.size() - position.column());
  string numbers = "-0123456789";
  int i = 0;
  while (i < line.size() && numbers.find(line.substr(i, 1), 0) != -1) {
    numbers = "0123456789";  // Disallow "-".
    i++;
  }
  return line.substr(0, i);
}

LineColumn AdvanceToNextNumber(LineColumn position) {
  while (true) {
    string line = buffer.line(position.line());
    int column = line.find_first_of("-0123456789", position.column());
    if (column != -1) {
      return LineColumn(position.line(), column);
    }
    if (position.line() + 1 == buffer.line_count()) {
      return position;
    }
    position = LineColumn(position.line() + 1, 0);
  }
}

// TODO: Use a lambda rather than communicating state through this global
// variable.
int delta_to_add = 0;

TransformationOutput AddToIntegerTransformationCallback(
    TransformationInput input) {
  auto position = AdvanceToNextNumber(input.position());
  string integer_str = IntegerAtPosition(position);
  SetStatus("Str: " + integer_str + " size " + (integer_str.size()).tostring());
  return TransformationOutput()
      .push(SetPositionTransformation(position))
      .push(DeleteTransformationBuilder()
                .set_modifiers(Modifiers().set_repetitions(integer_str.size()))
                .build())
      .push(InsertTransformationBuilder()
                .set_text((integer_str.toint() + delta_to_add).tostring())
                .build())
      .push(SetPositionTransformation(position));
}

void AddToIntegerTransformation(int delta) {
  delta_to_add = delta;
  buffer.ApplyTransformation(
      FunctionTransformation(AddToIntegerTransformationCallback));
}
