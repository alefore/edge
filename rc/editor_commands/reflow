Buffer b = CurrentBuffer();

// Returns a substring of text from the start, up until (excluding) the first
// character not in line_prefix_characters.
string GetPrefix(string text) {
  int pos_start = text.find_first_not_of(b.line_prefix_characters(), 0);
  if (pos_start == -1) {
    return text;
  }
  return text.substr(0, pos_start);
}

// Checks if a given line starts with the prefix. The line must have an
// additional character after the prefix for this to be true (in other words,
// this is false if the line is just equal to the prefix).
bool LineHasPrefix(string prefix, int line) {
  string contents = b.line(line);
  return contents.starts_with(prefix) && contents.size() > prefix.size();
}

// Moves the current position to the first line that follows a line that doesn't
// have a given prefix (by LineHasPrefix).
void ScrollBackToBeginningOfParagraph(string prefix) {
  SetStatus("Scrolling back to beginning of paragraph.");
  int line = b.position().line();
  while (line > 0 && LineHasPrefix(prefix, line - 1)) {
    line = line - 1;
  }

  b.set_position(LineColumn(line, 0));
}

// Runs a while loop, folding into the current line all lines in the current
// paragraph (by LineHasPrefix).
void FoldNextLineWhilePrefixIs(string prefix) {
  SetStatus("Folding paragraph into a single line.");
  int line = b.position().line();
  while (line + 1 < b.line_count() && LineHasPrefix(prefix, line + 1)) {
    b.set_position(LineColumn(line, b.line(line).size()));
    if (b.position().column() > prefix.size()) {
      b.InsertText(" ");  // To avoid a space in the first line.
    }
    int prefix_to_delete =
        b.line(line + 1).find_first_not_of(" ", prefix.size());
    b.DeleteCharacters(1 + prefix_to_delete);
  }
}

// Deletes length characters starting at start and inserts a break.
void BreakAt(string prefix, int start, int length) {
  b.set_position(LineColumn(b.position().line(), start));
  b.DeleteCharacters(length);
  b.InsertText("\n" + prefix);
}

void BreakLineByLineWidth(string prefix) {
  SetStatus("Breaking line by line width.");
  while (b.line(b.position().line()).size() > b.line_width()) {
    string s = b.line(b.position().line());
    int last_space = s.find_last_of(" ", b.line_width());
    if (last_space != -1 && last_space > prefix.size()) {
      int last_char = s.find_last_not_of(" ", last_space);
      if (last_char == -1) {
        SetStatus("Giving up: couldn't find start of break.");
        return;
      }
      BreakAt(prefix, last_char + 1, last_space - last_char);
    } else {
      // We'll have to leave a line longer than line_width.
      int first_space = s.find_first_not_of(" ", b.line_width());
      if (first_space == -1) {
        SetStatus("Giving up: Couldn't find end of line.");
        return;
      }
      int next_char = s.find_first_of(b.word_characters(), first_space);
      if (next_char == -1) {
        SetStatus("Giving up: Couldn't find next character.");
        return;
      }
      BreakAt(prefix, first_space, next_char - first_space);
    }
  }
}

string prefix = GetPrefix(b.line(b.position().line()));
SetStatus("Paragraph prefix: '" + prefix + "'");

ScrollBackToBeginningOfParagraph(prefix);
LineColumn starting_position = b.position();

// This is in case the first line in the paragraph has spaces that should be
// removed.
b.InsertText(prefix + "\n");
b.set_position(starting_position);

FoldNextLineWhilePrefixIs(prefix);
b.set_position(starting_position);

BreakLineByLineWidth(prefix);
b.set_position(starting_position);
